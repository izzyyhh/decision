# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Product {
  id: ID!
  name: String!
  description: String!
  createdAt: DateTime!
  updatedAt: DateTime
  sales: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type User {
  id: ID!
  name: String!
  token: String!
}

type PaginatedProducts {
  nodes: [Product!]!
  totalCount: Int!
  nextPage: Int
  previousPage: Int
  totalPages: Int
}

type Poll {
  id: ID!
  title: String!
  sharelink: String
  owner: User!
  predefined: Boolean!
}

type Option {
  id: ID!
  title: String!
  poll: Poll!
  thumbnailUrl: String
}

type Decision {
  id: ID!
  user: User!
  option: Option!
  poll: Poll!
  answer: Float
}

type Activity {
  name: String!
  date: Float!
  type: ActivityType!
  id: String!
}

enum ActivityType {
  POLL
  DECISION
}

type Genre {
  apiId: ID!
  title: String!
  movies: [Movie!]!
}

type Movie {
  id: ID!
  title: String!
  posterPath: String!
  backdropPath: String!
  rating: String!
  description: String!
  releaseDate: String!
  adult: Boolean!
  mediaType: String!
  genres: [Genre!]!
}

type MoviesDto {
  title: String!
  thumbnailUrl: String!
}

type Thumbnail {
  id: ID!
  link: String!
}

type Query {
  product(id: ID!): Product!
  productsAll: [Product!]!
  products(page: Int = 1, size: Int = 20, sortColumnName: String, sortDirection: SortDirection, query: String): PaginatedProducts!
  productsOffsetBased(offset: Int = 0, limit: Int = 20, sortColumnName: String, sortDirection: SortDirection, query: String): [Product!]!
  pollsAll: [Poll!]!
  getPoll(data: GetPollDto!): Poll!
  usersAll: [User!]!
  checkToken: Boolean!
  thumbnailsAll: [Thumbnail!]!
  optionsAll: [Decision!]!
  getOptionsForPoll(data: GetOptionsForPollDto!): [Option!]!
  getDecision(data: GetDecisionDto!): Decision!
  getDecisionsForPoll(data: GetDecisionForPollDto!): [Decision!]!
  canDecide(data: GetDecisionForUserAndPollDto!): Boolean!
  getActivity(data: ActivityInput!): [Activity!]!
  getRestaurantsPreset(data: LocationDto!): [Option!]!
  genresAll: [Genre!]!
  addGenres: Boolean!
  getMoviesPreset: [MoviesDto!]!
  addMovies: Boolean!
}

enum SortDirection {
  ASC
  DESC
}

input GetPollDto {
  pollId: String!
}

input GetOptionsForPollDto {
  pollId: String!
}

input GetDecisionDto {
  id: String!
}

input GetDecisionForPollDto {
  pollId: String!
}

input GetDecisionForUserAndPollDto {
  user: String!
  poll: String!
}

input ActivityInput {
  id: String!
}

input LocationDto {
  latitude: Float!
  longitude: Float!
}

type Mutation {
  addProduct(data: ProductInput!): Product!
  updateProduct(data: ProductInput!, id: ID!): Product!
  deleteProduct(id: ID!): Boolean!
  addPoll(data: PollInput!): Poll!
  addUser(data: UserInput!): User!
  addOption(data: OptionInput!): Option!
  addDecision(data: DecisionInput!): Decision!
}

input ProductInput {
  name: String!
  description: String!
}

input PollInput {
  title: String!
  predefined: Boolean
  owner: String!
  type: PollType!
}

enum PollType {
  BINARY
  DATE
  NUMERICAL
  TINDER
}

input UserInput {
  name: String!
}

input OptionInput {
  title: String!
  poll: String!
}

input DecisionInput {
  user: String!
  poll: String!
  option: String!
  answer: Float
}
